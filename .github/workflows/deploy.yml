name: Deploy NixOS Configuration

on:
  push:
    branches:
      - main # Or your default branch
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # packages: write # Only if you plan to use GitHub Packages as a Nix cache
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-24.11 # Or your desired Nixpkgs channel
          # extra_nix_config: | # Optional: if you use a binary cache
          #   substituters = https://cache.nixos.org/ https://your-cachix-name.cachix.org
          #   trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= your-cachix-name.cachix.org-1:your-key

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}
          args: --ssh --accept-risk=lose-ssh-host-keys --authkey-is-ssh-cert
          # version: 1.32.0 # Optional: pin Tailscale version

        # NOTE: For this approach to work, you need to set up Tailscale ACLs with:
        # 1. An auth key with "ephemeral" set to true for GitHub Actions
        # 2. SSH permissions for this ephemeral node to access core1-4 nodes
        # Example ACL snippet:
        # {
        #   "acls": [
        #     {
        #       "action": "accept",
        #       "src": ["github-actions"], // A tag applied to the ephemeral node
        #       "dst": ["tag:server-nodes:22"],
        #       "proto": "tcp"
        #     }
        #   ],
        #   "ssh": [
        #     {
        #       "action": "accept",
        #       "src": ["github-actions"],
        #       "dst": ["tag:server-nodes"],
        #       "users": ["root"]
        #     }
        #   ]
        # }

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_FOR_COLMENA }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_colmena
          chmod 600 ~/.ssh/id_colmena

          # Simple SSH config for direct Tailscale SSH connections
          cat <<EOF > ~/.ssh/config
          Host core1 core2 core3 core4
            User root
            IdentityFile ~/.ssh/id_colmena
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config

          # Print SSH key fingerprint for debugging
          ssh-keygen -l -f ~/.ssh/id_colmena || echo "Invalid key format"

      - name: Import SOPS Age Key
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          mkdir -p ~/.config/sops/age
          echo "${SOPS_AGE_KEY}" > ~/.config/sops/age/keys.txt
          chmod 600 ~/.config/sops/age/keys.txt
          # sops --decrypt secrets/k3s-agent-node-token # Test decryption (optional)

      - name: Deploy NixOS Configuration to Nodes
        run: |
          echo "Attempting to connect to Tailscale nodes..."
          for i in {1..10}; do
            if tailscale status | grep -q "core1"; then # Check one of your nodes
              echo "Tailscale connection established."
              break
            fi
            echo "Waiting for Tailscale to connect... attempt $i"
            sleep 5
          done
          tailscale status # Display Tailscale status for debugging

          # Test SSH connections with standard SSH
          echo "Testing SSH connections..."
          for node in core1 core2 core3 core4; do
            echo "Testing connection to $node..."
            ssh -v $node "echo SSH connection to $node successful" || echo "Failed to connect to $node"
          done

          # Ensure the flake inputs are up-to-date
          nix flake lock --update-input nixpkgs

          # Deploy to each node
          NODES="core1 core2 core3 core4"
          for node in $NODES; do
            echo "Deploying to $node..."
            
            # Try direct nixos-rebuild approach first
            echo "Attempting direct deployment to $node..."
            if nix run nixpkgs#nixos-rebuild -- switch --flake .#$node --target-host $node --use-remote-sudo --show-trace; then
              echo "Successfully deployed to $node using nixos-rebuild."
            else
              echo "Direct deployment failed, trying two-phase approach for $node..."
              
              # Fall back to two-phase deployment if direct approach fails
              echo "Building system for $node locally..."
              nix build .#nixosConfigurations.$node.config.system.build.toplevel --show-trace
              
              # Get the closure path
              CLOSURE_PATH=$(readlink -f result)
              echo "Built system closure at $CLOSURE_PATH"
              
              # Copy and activate
              echo "Copying to $node and activating..."
              nix copy --to ssh://root@$node $CLOSURE_PATH
              ssh $node "$CLOSURE_PATH/bin/switch-to-configuration switch"
              echo "Deployment to $node completed via two-phase approach."
            fi
          done
          echo "All nodes deployed."
